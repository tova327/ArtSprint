// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Server.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250311171658_addInstructionsToCopetition")]
    partial class addInstructionsToCopetition
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Server.Core.models.CommentModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("PaintId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PaintId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Server.Core.models.CompetitionModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("GoalDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Subject")
                        .HasColumnType("int");

                    b.Property<int?>("WinnerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WinnerId");

                    b.ToTable("Competitions");
                });

            modelBuilder.Entity("Server.Core.models.CompetitionPaintingModel", b =>
                {
                    b.Property<int>("IdPaint")
                        .HasColumnType("int");

                    b.Property<int>("IdCompetition")
                        .HasColumnType("int");

                    b.Property<int>("CountPositive")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Place")
                        .HasColumnType("int");

                    b.HasKey("IdPaint", "IdCompetition");

                    b.HasIndex("IdCompetition");

                    b.HasIndex("IdPaint")
                        .IsUnique();

                    b.ToTable("CompetitionPaintings");
                });

            modelBuilder.Entity("Server.Core.models.PaintingModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsMedal")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Likes")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<int>("Subject")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Paintings");
                });

            modelBuilder.Entity("Server.Core.models.UserModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CameOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsMedal")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastPaint")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Server.Core.models.CommentModel", b =>
                {
                    b.HasOne("Server.Core.models.PaintingModel", "Paint")
                        .WithMany("Comments")
                        .HasForeignKey("PaintId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Core.models.UserModel", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paint");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Server.Core.models.CompetitionModel", b =>
                {
                    b.HasOne("Server.Core.models.UserModel", "Winner")
                        .WithMany("Competitions")
                        .HasForeignKey("WinnerId");

                    b.Navigation("Winner");
                });

            modelBuilder.Entity("Server.Core.models.CompetitionPaintingModel", b =>
                {
                    b.HasOne("Server.Core.models.CompetitionModel", "Competition")
                        .WithMany("CompetitionPaintings")
                        .HasForeignKey("IdCompetition")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Core.models.PaintingModel", "Painting")
                        .WithOne("CompetitionPainting")
                        .HasForeignKey("Server.Core.models.CompetitionPaintingModel", "IdPaint")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competition");

                    b.Navigation("Painting");
                });

            modelBuilder.Entity("Server.Core.models.PaintingModel", b =>
                {
                    b.HasOne("Server.Core.models.UserModel", "Owner")
                        .WithMany("Paintings")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Server.Core.models.CompetitionModel", b =>
                {
                    b.Navigation("CompetitionPaintings");
                });

            modelBuilder.Entity("Server.Core.models.PaintingModel", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("CompetitionPainting")
                        .IsRequired();
                });

            modelBuilder.Entity("Server.Core.models.UserModel", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Competitions");

                    b.Navigation("Paintings");
                });
#pragma warning restore 612, 618
        }
    }
}
